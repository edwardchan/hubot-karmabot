// Generated by CoffeeScript 1.10.0
module.exports = function(robot) {
  var annoyIntervalId, answer, botname, enterReplies, leaveReplies, lulz, minusminus_re, plusplus_minusminus_re, plusplus_re;
  botname = process.env.HUBOT_SLACK_BOTNAME;
  plusplus_re = /@([a-z0-9_\-\.]+)\+{2,}/ig;
  minusminus_re = /@([a-z0-9_\-\.]+)\-{2,}/ig;
  plusplus_minusminus_re = /@([a-z0-9_\-\.]+)[\+\-]{2,}/ig;
  robot.hear(plusplus_minusminus_re, function(msg) {
    var count, match, res, sending_user, user;
    sending_user = msg.message.user.name;
    res = '';
    while ((match = plusplus_re.exec(msg.message))) {
      user = match[1].replace(/\-+$/g, '');
      if (user !== sending_user) {
        count = (robot.brain.get(user) || 0) + 1;
        robot.brain.set(user, count);
        res += "@" + user + "++ [woot! now at " + count + "]\n";
      } else if (process.env.KARMABOT_NO_GIF) {
        res += process.env.KARMABOT_NO_GIF;
      }
    }
    while ((match = minusminus_re.exec(msg.message))) {
      user = match[1].replace(/\-+$/g, '');
      count = (robot.brain.get(user) || 0) - 1;
      robot.brain.set(user, count);
      res += "@" + user + "-- [ouch! now at " + count + "]\n";
    }
    return msg.send(res.replace(/\s+$/g, ''));
  });
  robot.hear(RegExp(botname + "\\s+@([a-z0-9_\\-\\.]+)", "i"), function(msg) {
    var count, point_label, user;
    user = msg.match[1].replace(/\-+$/g, '');
    count = robot.brain.get(user);
    if (count !== null) {
      point_label = count === 1 ? "point" : "points";
      return msg.send(("@" + user + ": " + count + " ") + point_label);
    } else {
      return msg.send("@" + user + " has no karma");
    }
  });
  robot.hear(RegExp(botname + "\\s+leaderboard", "i"), function(msg) {
    var i, j, leader, limit, newline, point_label, points, ref, score, str, tuples, username, users;
    users = robot.brain.data._private;
    tuples = [];
    for (username in users) {
      score = users[username];
      tuples.push([username, score]);
    }
    if (tuples.length === 0) {
      msg.send("The lack of karma is too damn high!");
      return;
    }
    tuples.sort(function(a, b) {
      if (a[1] > b[1]) {
        return -1;
      } else if (a[1] < b[1]) {
        return 1;
      } else {
        return 0;
      }
    });
    str = '';
    limit = 5;
    for (i = j = 0, ref = Math.min(limit, tuples.length); 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      username = tuples[i][0];
      points = tuples[i][1];
      point_label = points === 1 ? "point" : "points";
      leader = i === 0 ? "All hail supreme leader!" : "";
      newline = i < Math.min(limit, tuples.length) - 1 ? '\n' : '';
      str += ("#" + (i + 1) + " @" + username + " [" + points + " ") + point_label + "] " + leader + newline;
    }
    return msg.send(str);
  });
  robot.respond(/open the (.*) doors/i, function(msg) {
    var doorType;
    doorType = msg.match[1];
    if (doorType === "pod bay") {
      return msg.reply("I'm afraid I can't let you do that.");
    } else {
      return msg.reply("Opening " + doorType + " doors");
    }
  });
  robot.hear(/I like pie/i, function(msg) {
    return msg.emote("makes a freshly baked pie");
  });
  lulz = ['lol', 'rofl', 'lmao'];
  robot.respond(/lulz/i, function(msg) {
    return msg.send(msg.random(lulz));
  });
  robot.topic(function(msg) {
    return msg.send(msg.message.text + "? That's a Paddlin'");
  });
  enterReplies = ['Hi', 'Target Acquired', 'Firing', 'Hello friend.', 'Gotcha', 'I see you'];
  leaveReplies = ['Are you still there?', 'Target lost', 'Searching'];
  robot.enter(function(msg) {
    return msg.send(msg.random(enterReplies));
  });
  robot.leave(function(msg) {
    return msg.send(msg.random(leaveReplies));
  });
  answer = process.env.HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING;
  robot.respond(/what is the answer to the ultimate question of life/, function(msg) {
    if (answer == null) {
      msg.send("Missing HUBOT_ANSWER_TO_THE_ULTIMATE_QUESTION_OF_LIFE_THE_UNIVERSE_AND_EVERYTHING in environment: please set and try again");
      return;
    }
    return msg.send(answer + ", but what is the question?");
  });
  robot.respond(/you are a little slow/, function(msg) {
    return setTimeout(function() {
      return msg.send("Who you calling 'slow'?");
    }, 60 * 1000);
  });
  annoyIntervalId = null;
  robot.respond(/annoy me/, function(msg) {
    if (annoyIntervalId) {
      msg.send("AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH");
      return;
    }
    msg.send("Hey, want to hear the most annoying sound in the world?");
    return annoyIntervalId = setInterval(function() {
      return msg.send("AAAAAAAAAAAEEEEEEEEEEEEEEEEEEEEEEEEIIIIIIIIHHHHHHHHHH");
    }, 1000);
  });
  robot.respond(/unannoy me/, function(msg) {
    if (annoyIntervalId) {
      msg.send("GUYS, GUYS, GUYS!");
      clearInterval(annoyIntervalId);
      return annoyIntervalId = null;
    } else {
      return msg.send("Not annoying you right now, am I?");
    }
  });
  robot.router.post('/hubot/chatsecrets/:room', function(req, res) {
    var data, room, secret;
    room = req.params.room;
    data = JSON.parse(req.body.payload);
    secret = data.secret;
    robot.messageRoom(room, "I have a secret: " + secret);
    return res.send('OK');
  });
  robot.error(function(err, msg) {
    robot.logger.error("DOES NOT COMPUTE");
    if (msg != null) {
      return msg.reply("DOES NOT COMPUTE");
    }
  });
  robot.respond(/have a soda/i, function(msg) {
    var sodasHad;
    sodasHad = robot.brain.get('totalSodas') * 1 || 0;
    if (sodasHad > 4) {
      return msg.reply("I'm too fizzy..");
    } else {
      msg.reply('Sure!');
      return robot.brain.set('totalSodas', sodasHad + 1);
    }
  });
  return robot.respond(/sleep it off/i, function(msg) {
    robot.brain.set('totalSodas', 0);
    return robot.respond('zzzzz');
  });
};
